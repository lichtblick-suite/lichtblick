/// <reference types="react" />
/**
 * 季節エフェクトコンポーネント（雪・コンフェッティ）
 *
 * このコンポーネントは、Three.jsとWebGLを使用して美しい季節エフェクトを
 * 表示します。DataSourceDialogの背景で動作し、ユーザー体験を向上させる
 * 視覚的な演出を提供します。
 *
 * ## 主な機能
 *
 * ### 3Dパーティクルシステム
 * - Three.jsベースの高性能パーティクルレンダリング
 * - WebGLシェーダーによる効率的な描画
 * - リアルタイムアニメーション
 *
 * ### 2種類のエフェクト
 * - **雪（Snow）**: 冬季の雪降りエフェクト
 * - **コンフェッティ（Confetti）**: 祝祭的な紙吹雪エフェクト
 *
 * ### パフォーマンス最適化
 * - バッファジオメトリによる効率的なメモリ使用
 * - カスタムシェーダーによる高速レンダリング
 * - 適切なリソース管理とクリーンアップ
 *
 * ### レスポンシブデザイン
 * - 画面サイズに応じた自動調整
 * - デバイスピクセル比対応
 * - 全画面オーバーレイ表示
 *
 * ## エフェクトの詳細
 *
 * ### 雪エフェクト（Snow）
 * - **パーティクル数**: 75個
 * - **色**: 白色（RGB: 1.0, 1.0, 1.0）
 * - **落下速度**: 0.1（ゆっくり）
 * - **風の影響**: 0.02（わずかな横揺れ）
 * - **用途**: 冬季の季節演出
 *
 * ### コンフェッティエフェクト（Confetti）
 * - **パーティクル数**: 100個
 * - **色**: ランダムなHSL色空間（彩度1.0、明度0.5）
 * - **落下速度**: 0.2（速め）
 * - **風の影響**: 0.0（直線落下）
 * - **用途**: 祝祭やイベント演出
 *
 * ## 技術的実装
 *
 * ### Three.js構成
 * - **Scene**: 3Dシーンの管理
 * - **OrthographicCamera**: 2D的な平行投影
 * - **BufferGeometry**: 効率的なジオメトリ管理
 * - **ShaderMaterial**: カスタムシェーダー適用
 * - **Points**: パーティクル描画
 *
 * ### シェーダープログラム
 *
 * #### 頂点シェーダー（Vertex Shader）
 * - **時間ベースアニメーション**: `time` uniform による動的更新
 * - **物理シミュレーション**: 重力、風、波動の計算
 * - **位置計算**: X軸（風+波動）、Y軸（重力）の移動
 * - **サイズ調整**: パーティクルサイズのランダム化
 *
 * #### フラグメントシェーダー（Fragment Shader）
 * - **円形パーティクル**: 距離ベースのアルファ切り抜き
 * - **色適用**: 頂点シェーダーからの色情報適用
 * - **透明度対応**: アルファブレンディング
 *
 * ### アニメーションループ
 *
 * #### 時間管理
 * - 開始時刻の記録
 * - 経過時間の計算
 * - シェーダーuniform更新
 *
 * #### レンダリング
 * - `requestAnimationFrame` による最適化
 * - 60FPS目標の滑らかなアニメーション
 * - フレームドロップ対策
 *
 * ## パフォーマンス考慮事項
 *
 * ### メモリ管理
 * - バッファ属性の効率的な使用
 * - ジオメトリの使い回し
 * - 適切なディスポーズ処理
 *
 * ### GPU最適化
 * - シェーダーでの並列処理
 * - バッチ描画によるドローコール削減
 * - テクスチャ不使用による軽量化
 *
 * ### リソースクリーンアップ
 * - コンポーネントアンマウント時のリソース解放
 * - WebGLコンテキストの適切な破棄
 * - メモリリークの防止
 *
 * ## 使用シナリオ
 *
 * ### 季節イベント
 * - 12月-2月: 雪エフェクト
 * - 特別なイベント: コンフェッティエフェクト
 * - ユーザー体験の向上
 *
 * ### ブランディング
 * - アプリケーションの親しみやすさ向上
 * - 季節感の演出
 * - 記憶に残るユーザー体験
 *
 * ## アクセシビリティ配慮
 *
 * ### 動きの制御
 * - 動きに敏感なユーザーへの配慮
 * - 必要に応じたエフェクト無効化オプション
 * - パフォーマンス影響の最小化
 *
 * ### 視覚的配慮
 * - 背景コンテンツの可読性確保
 * - 適切な透明度設定
 * - 色覚異常への配慮
 *
 * @param props - コンポーネントプロパティ
 * @param props.effect - 表示するエフェクトの種類（"snow" | "confetti"）
 * @returns 季節エフェクトを表示するReactコンポーネント
 *
 * @example
 * ```tsx
 * // 雪エフェクトの表示
 * <Snow effect="snow" />
 *
 * // コンフェッティエフェクトの表示
 * <Snow effect="confetti" />
 * ```
 *
 * @example
 * ```tsx
 * // 季節に応じた動的エフェクト
 * const currentMonth = new Date().getMonth();
 * const isWinter = currentMonth === 11 || currentMonth === 0 || currentMonth === 1;
 *
 * {isWinter && <Snow effect="snow" />}
 * ```
 *
 * @example
 * ```tsx
 * // 条件付きエフェクト表示
 * const [showEffects, setShowEffects] = useState(true);
 *
 * {showEffects && (
 *   <Snow effect={isSpecialEvent ? "confetti" : "snow"} />
 * )}
 * ```
 */
export default function Snow({ effect }: {
    effect: "snow" | "confetti";
}): React.JSX.Element;
